type token =
  | EOL
  | MINUS
  | PLUS
  | ABS
  | NOT
  | MULT
  | DIV
  | POW
  | EQUAL
  | N_EQUAL
  | LESS_T
  | GREATER_T
  | LESS
  | GREATER
  | MOD
  | REM
  | AND
  | OR
  | XOR
  | AND_THEN
  | OR_ELSE
  | L_PAR
  | R_PAR
  | COMMA
  | SEMICOLON
  | COLON
  | L_ID
  | R_ID
  | NULL
  | ASS
  | LOOP
  | END_LOOP
  | WHILE
  | FOR
  | IN
  | SEQUENCE
  | REVERSE
  | IF
  | THEN
  | ELSE
  | ELSIF
  | END_IF
  | CASE
  | IS
  | WHEN
  | ARROW
  | OTHERS
  | END_CASE
  | PIPE
  | GOTO
  | EXIT
  | RETURN
  | RANGE
  | CONSTANT
  | TYPE
  | IS_RANGE
  | SUBTYPE
  | RENAMES
  | PROCEDURE
  | OUT
  | IN_OUT
  | FUNCTION
  | BEGIN
  | END
  | Int of (int)
  | Float of (int*int)
  | IntExp of (int*bool*int)
  | FloatExp of (int*int*bool*int)
  | BaseInt of (int*string)
  | BaseFloat of (int*string*string)
  | BaseIntExp of (int*string*bool*int)
  | BaseFloatExp of (int*string*string*bool*int)
  | Base of (int)
  | Hex of (string)
  | String of (string)
  | Id of (string)
  | QualId of (string)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
    open Ast;;

    (* TODO *)
# 87 "parser.ml"
let yytransl_const = [|
  257 (* EOL *);
  258 (* MINUS *);
  259 (* PLUS *);
  260 (* ABS *);
  261 (* NOT *);
  262 (* MULT *);
  263 (* DIV *);
  264 (* POW *);
  265 (* EQUAL *);
  266 (* N_EQUAL *);
  267 (* LESS_T *);
  268 (* GREATER_T *);
  269 (* LESS *);
  270 (* GREATER *);
  271 (* MOD *);
  272 (* REM *);
  273 (* AND *);
  274 (* OR *);
  275 (* XOR *);
  276 (* AND_THEN *);
  277 (* OR_ELSE *);
  278 (* L_PAR *);
  279 (* R_PAR *);
  280 (* COMMA *);
  281 (* SEMICOLON *);
  282 (* COLON *);
  283 (* L_ID *);
  284 (* R_ID *);
  285 (* NULL *);
  286 (* ASS *);
  287 (* LOOP *);
  288 (* END_LOOP *);
  289 (* WHILE *);
  290 (* FOR *);
  291 (* IN *);
  292 (* SEQUENCE *);
  293 (* REVERSE *);
  294 (* IF *);
  295 (* THEN *);
  296 (* ELSE *);
  297 (* ELSIF *);
  298 (* END_IF *);
  299 (* CASE *);
  300 (* IS *);
  301 (* WHEN *);
  302 (* ARROW *);
  303 (* OTHERS *);
  304 (* END_CASE *);
  305 (* PIPE *);
  306 (* GOTO *);
  307 (* EXIT *);
  308 (* RETURN *);
  309 (* RANGE *);
  310 (* CONSTANT *);
  311 (* TYPE *);
  312 (* IS_RANGE *);
  313 (* SUBTYPE *);
  314 (* RENAMES *);
  315 (* PROCEDURE *);
  316 (* OUT *);
  317 (* IN_OUT *);
  318 (* FUNCTION *);
  319 (* BEGIN *);
  320 (* END *);
    0|]

let yytransl_block = [|
  321 (* Int *);
  322 (* Float *);
  323 (* IntExp *);
  324 (* FloatExp *);
  325 (* BaseInt *);
  326 (* BaseFloat *);
  327 (* BaseIntExp *);
  328 (* BaseFloatExp *);
  329 (* Base *);
  330 (* Hex *);
  331 (* String *);
  332 (* Id *);
  333 (* QualId *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\004\000\004\000\005\000\005\000\006\000\006\000\
\007\000\007\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\009\000\009\000\011\000\011\000\012\000\012\000\
\013\000\013\000\014\000\014\000\014\000\010\000\010\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\016\000\016\000\
\017\000\020\000\020\000\018\000\018\000\021\000\021\000\021\000\
\019\000\019\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000\002\000\002\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\004\000\002\000\001\000\002\000\001\000\003\000\001\000\
\004\000\001\000\002\000\004\000\002\000\005\000\004\000\006\000\
\007\000\006\000\008\000\009\000\010\000\012\000\013\000\011\000\
\013\000\014\000\008\000\010\000\011\000\009\000\011\000\012\000\
\006\000\008\000\007\000\009\000\006\000\003\000\002\000\005\000\
\002\000\003\000\002\000\001\000\005\000\004\000\005\000\004\000\
\003\000\001\000\001\000\003\000\001\000\001\000\005\000\003\000\
\004\000\004\000\005\000\005\000\006\000\004\000\005\000\007\000\
\005\000\006\000\003\000\006\000\005\000\008\000\007\000\010\000\
\009\000\012\000\008\000\011\000\010\000\013\000\008\000\011\000\
\010\000\013\000\009\000\012\000\011\000\014\000\007\000\010\000\
\009\000\012\000\008\000\011\000\010\000\013\000\008\000\011\000\
\010\000\013\000\009\000\012\000\011\000\014\000\003\000\001\000\
\002\000\003\000\004\000\003\000\001\000\001\000\001\000\001\000\
\002\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\147\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\038\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\042\000\000\000\145\000\000\000\000\000\000\000\
\037\000\000\000\135\000\142\000\143\000\144\000\138\000\000\000\
\000\000\140\000\000\000\000\000\000\000\099\000\000\000\000\000\
\000\000\000\000\043\000\000\000\000\000\000\000\000\000\000\000\
\002\000\003\000\004\000\005\000\006\000\007\000\008\000\009\000\
\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\
\071\000\000\000\073\000\000\000\000\000\000\000\045\000\000\000\
\075\000\000\000\088\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\139\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\013\000\014\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\070\000\000\000\074\000\000\000\
\000\000\000\000\000\000\000\000\000\000\119\000\000\000\000\000\
\089\000\000\000\000\000\000\000\090\000\000\000\000\000\094\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\097\000\
\000\000\000\000\000\000\000\000\101\000\000\000\041\000\047\000\
\033\000\000\000\000\000\000\000\000\000\019\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\044\000\127\000\091\000\000\000\095\000\000\000\
\000\000\092\000\123\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\100\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\034\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\085\000\000\000\000\000\000\000\000\000\
\072\000\000\000\000\000\000\000\039\000\046\000\093\000\000\000\
\098\000\131\000\000\000\000\000\121\000\000\000\000\000\120\000\
\000\000\000\000\096\000\000\000\000\000\103\000\000\000\000\000\
\000\000\000\000\000\000\050\000\000\000\000\000\000\000\000\000\
\000\000\000\000\065\000\000\000\000\000\000\000\000\000\000\000\
\069\000\048\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\129\000\125\000\000\000\128\000\124\000\000\000\
\000\000\000\000\111\000\107\000\000\000\102\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\067\000\000\000\000\000\081\000\049\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\133\000\132\000\000\000\000\000\
\115\000\000\000\000\000\105\000\000\000\000\000\000\000\000\000\
\000\000\059\000\066\000\000\000\000\000\079\000\051\000\000\000\
\000\000\000\000\000\000\000\000\122\000\000\000\000\000\104\000\
\000\000\000\000\000\000\000\000\113\000\109\000\000\000\000\000\
\062\000\000\000\077\000\068\000\052\000\000\000\000\000\000\000\
\000\000\130\000\126\000\000\000\112\000\108\000\000\000\000\000\
\000\000\117\000\000\000\053\000\000\000\000\000\000\000\060\000\
\000\000\134\000\116\000\106\000\000\000\000\000\056\000\000\000\
\063\000\000\000\000\000\061\000\114\000\110\000\000\000\000\000\
\064\000\054\000\000\000\118\000\057\000\000\000\055\000\058\000"

let yydgoto = "\002\000\
\005\000\006\000\163\000\091\000\092\000\164\000\050\000\051\000\
\052\000\111\000\003\001\220\000\006\001\007\001\023\000\024\000\
\112\000\016\000\025\000\017\000\064\000"

let yysindex = "\019\000\
\162\255\000\000\220\254\008\255\000\000\087\255\131\255\245\254\
\000\000\024\255\059\000\024\255\209\254\092\255\106\255\089\255\
\098\255\057\255\064\255\070\255\074\255\185\002\041\000\130\255\
\126\255\134\255\000\000\209\254\154\255\024\255\117\255\169\255\
\024\255\184\255\181\255\093\255\002\255\177\255\239\255\185\002\
\087\000\183\255\087\000\087\000\200\255\007\255\003\255\251\255\
\175\255\185\002\000\000\211\255\000\000\247\254\185\002\230\255\
\000\000\070\000\000\000\000\000\000\000\000\000\000\000\209\254\
\226\000\000\000\087\000\213\255\024\255\000\000\236\000\024\255\
\209\254\012\000\000\000\011\000\087\000\087\000\087\000\087\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\225\255\207\005\000\000\024\000\013\000\147\004\236\003\025\000\
\000\000\009\000\000\000\107\006\227\255\087\000\000\000\087\000\
\000\000\009\255\000\000\087\000\001\255\003\000\248\254\032\000\
\250\255\209\254\185\002\252\255\000\000\185\002\004\000\246\004\
\044\000\047\000\185\002\010\000\049\000\250\254\185\002\050\000\
\173\000\000\000\000\000\207\006\000\000\087\000\087\000\087\000\
\087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
\087\000\087\000\087\000\087\000\087\000\087\000\087\000\185\002\
\087\000\059\255\185\002\031\000\000\000\087\000\000\000\185\002\
\087\000\002\000\187\006\056\000\127\006\000\000\057\000\229\006\
\000\000\165\255\061\000\087\000\000\000\209\254\062\000\000\000\
\014\255\037\000\029\000\185\002\033\000\185\002\087\000\000\000\
\135\255\035\000\185\002\043\000\000\000\246\000\000\000\000\000\
\000\000\173\000\173\000\080\000\080\000\000\000\204\255\204\255\
\204\255\204\255\204\255\204\255\080\000\080\000\249\006\249\006\
\249\006\249\006\249\006\073\000\085\000\172\000\003\000\021\005\
\082\000\228\254\161\255\071\000\147\006\088\000\233\005\089\000\
\087\000\103\000\000\000\000\000\000\000\106\000\000\000\052\005\
\112\000\000\000\000\000\113\000\102\001\021\255\081\000\022\255\
\083\000\167\006\000\000\155\001\023\255\084\000\209\254\185\002\
\086\000\119\000\000\000\083\005\120\000\087\000\185\002\185\002\
\087\000\136\000\199\255\000\000\114\005\122\000\116\000\141\000\
\000\000\027\255\185\002\180\255\000\000\000\000\000\000\087\000\
\000\000\000\000\185\002\107\000\000\000\144\000\030\255\000\000\
\148\000\032\255\000\000\185\002\115\000\000\000\150\000\033\255\
\155\255\118\000\185\002\000\000\087\000\185\002\003\006\151\000\
\142\000\181\004\000\000\185\002\161\000\087\000\185\002\161\255\
\000\000\000\000\162\000\158\000\172\000\145\005\160\000\229\006\
\128\000\185\002\000\000\000\000\168\000\000\000\000\000\170\000\
\132\000\185\002\000\000\000\000\190\000\000\000\205\001\041\255\
\152\000\029\006\186\000\185\002\194\000\195\000\185\002\180\000\
\000\000\229\006\031\000\000\000\000\000\062\255\176\005\192\000\
\087\000\185\002\068\255\163\000\000\000\000\000\069\255\164\000\
\000\000\185\002\166\000\000\000\200\000\079\255\185\002\201\000\
\198\000\000\000\000\000\191\000\206\000\000\000\000\000\208\000\
\087\000\185\002\055\006\202\000\000\000\211\000\082\255\000\000\
\220\000\086\255\188\000\185\002\000\000\000\000\228\000\238\000\
\000\000\249\000\000\000\000\000\000\000\081\006\243\000\185\002\
\088\255\000\000\000\000\251\000\000\000\000\000\255\000\094\255\
\222\000\000\000\009\001\000\000\185\002\095\255\008\001\000\000\
\019\001\000\000\000\000\000\000\023\001\096\255\000\000\022\001\
\000\000\026\001\097\255\000\000\000\000\000\000\030\001\116\255\
\000\000\000\000\032\001\000\000\000\000\033\001\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\034\001\000\000\000\000\
\036\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\179\255\
\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\248\000\000\000\000\000\074\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\118\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\071\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\039\001\000\000\000\000\000\000\000\000\040\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\121\002\171\002\124\001\177\001\000\000\229\002\015\003\
\057\003\099\003\141\003\183\003\227\001\021\002\249\255\242\003\
\022\004\058\004\094\004\000\000\000\000\000\000\215\004\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\237\255\000\000\021\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\156\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\248\255\020\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\223\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\063\001\236\001\243\255\113\255\199\001\000\000\
\036\000\191\255\219\000\245\000\025\001\000\000\000\000\023\000\
\151\255\246\255\234\255\000\000\000\000"

let yytablesize = 2057
let yytable = "\029\000\
\053\000\026\000\121\000\171\000\077\000\175\000\078\000\079\000\
\049\000\213\000\012\000\000\001\001\001\002\001\057\000\107\000\
\173\000\063\000\189\000\001\000\108\000\108\000\066\000\072\000\
\080\000\169\000\049\000\099\000\027\000\028\000\108\000\097\000\
\015\000\166\000\015\000\116\000\049\000\190\000\235\000\007\000\
\013\000\049\000\119\000\170\000\109\000\021\001\024\001\030\001\
\124\000\174\000\117\000\050\001\059\000\073\000\060\001\015\000\
\063\001\068\001\122\000\126\000\077\000\125\000\078\000\079\000\
\230\000\100\001\110\000\081\000\082\000\083\000\084\000\085\000\
\086\000\087\000\088\000\076\000\110\000\089\000\027\000\028\000\
\080\000\013\001\098\000\008\000\167\000\105\000\111\001\009\000\
\217\000\236\000\113\000\015\000\117\001\120\001\015\000\214\000\
\022\001\025\001\031\001\014\000\178\000\049\000\051\001\126\001\
\049\000\061\001\139\001\064\001\069\001\049\000\142\001\032\000\
\152\001\049\000\069\000\030\000\101\001\070\000\156\001\161\001\
\166\001\170\001\033\000\081\000\082\000\083\000\084\000\085\000\
\086\000\087\000\088\000\031\000\034\000\089\000\215\000\028\000\
\071\000\112\001\049\000\035\000\173\001\049\000\086\000\118\001\
\121\001\036\000\049\000\086\000\253\000\037\000\179\000\060\000\
\010\000\181\000\127\001\054\000\056\000\140\001\186\000\243\000\
\233\000\143\001\077\000\153\001\078\000\079\000\049\000\249\000\
\049\000\157\001\162\001\167\001\171\001\049\000\011\000\086\000\
\061\000\062\000\244\000\070\001\087\000\077\000\080\000\078\000\
\079\000\087\000\087\000\212\000\055\000\229\000\218\000\174\001\
\027\000\028\000\108\000\222\000\102\000\058\000\071\001\103\000\
\038\000\080\000\055\001\038\000\104\000\134\000\135\000\004\001\
\038\000\136\000\137\000\138\000\065\000\087\000\020\001\239\000\
\053\001\241\000\145\000\146\000\003\000\029\001\246\000\004\000\
\068\000\081\000\082\000\083\000\084\000\085\000\086\000\087\000\
\088\000\033\001\049\000\089\000\027\000\028\000\044\001\067\000\
\045\001\049\000\049\000\088\001\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\074\000\049\000\089\000\215\000\
\028\000\160\000\093\000\161\000\162\000\049\000\078\000\075\000\
\078\000\028\000\028\000\028\000\028\000\028\000\049\000\028\000\
\028\000\028\000\106\000\096\000\101\000\049\000\028\000\028\000\
\049\000\114\000\083\000\034\001\028\000\083\000\049\000\028\000\
\110\000\049\000\040\001\041\001\028\000\084\000\028\000\127\000\
\084\000\028\000\128\000\089\000\049\000\153\000\052\001\154\000\
\099\001\157\000\028\000\076\000\049\000\158\000\057\001\172\000\
\176\000\177\000\180\000\076\000\076\000\076\000\049\000\065\001\
\076\000\049\000\182\000\076\000\184\000\185\000\073\001\188\000\
\187\000\075\001\192\000\219\000\049\000\224\000\226\000\080\001\
\237\000\228\000\083\001\076\000\049\000\231\000\234\000\138\000\
\077\000\049\000\078\000\079\000\238\000\092\001\247\000\018\000\
\240\000\019\000\245\000\020\000\049\000\096\001\021\000\090\000\
\250\000\094\000\095\000\251\000\080\000\100\000\049\000\105\001\
\255\000\018\000\108\001\019\000\014\000\020\000\008\001\010\001\
\021\000\022\000\049\000\012\001\018\000\116\001\019\000\014\001\
\020\000\120\000\015\001\021\000\115\000\123\001\014\000\049\000\
\017\001\018\001\128\001\129\000\130\000\131\000\132\000\036\001\
\023\001\014\000\026\001\032\001\035\001\135\001\038\001\081\000\
\082\000\083\000\084\000\085\000\086\000\087\000\088\000\145\001\
\043\001\089\000\027\000\028\000\048\001\049\001\165\000\047\001\
\059\001\058\001\168\000\151\001\062\001\077\000\067\001\078\000\
\079\000\066\001\136\000\137\000\138\000\072\001\077\001\078\001\
\160\001\081\001\085\001\145\000\146\000\086\001\090\001\091\001\
\093\001\080\000\094\001\095\001\194\000\195\000\196\000\197\000\
\198\000\199\000\200\000\201\000\202\000\203\000\204\000\205\000\
\206\000\207\000\208\000\209\000\210\000\211\000\097\001\102\001\
\216\000\104\001\106\001\107\001\221\000\109\001\114\001\223\000\
\125\001\129\001\119\001\122\001\124\001\130\001\132\001\001\001\
\133\001\137\001\232\000\138\001\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\141\001\242\000\089\000\215\000\
\028\000\036\000\036\000\144\001\146\001\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\147\001\036\000\036\000\
\036\000\148\001\150\001\154\001\252\000\036\000\036\000\155\001\
\018\000\005\001\019\000\036\000\020\000\158\001\036\000\021\000\
\118\000\159\001\018\000\036\000\019\000\036\000\020\000\163\001\
\036\000\021\000\123\000\164\001\018\000\014\000\019\000\165\001\
\020\000\036\000\169\001\021\000\248\000\168\001\172\001\014\000\
\175\001\176\001\141\000\136\000\039\001\040\000\146\000\042\001\
\137\000\014\000\082\000\080\000\133\000\191\000\131\001\110\001\
\084\001\000\000\054\001\011\000\011\000\000\000\056\001\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\000\000\
\011\000\011\000\011\000\074\001\000\000\000\000\000\000\011\000\
\011\000\000\000\000\000\000\000\082\001\011\000\005\001\000\000\
\011\000\000\000\000\000\087\001\000\000\011\000\000\000\011\000\
\000\000\000\000\011\000\000\000\000\000\017\000\017\000\000\000\
\000\000\017\000\017\000\011\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\000\000\017\000\017\000\017\000\000\000\000\000\115\001\
\000\000\017\000\017\000\000\000\018\000\000\000\019\000\017\000\
\020\000\000\000\017\000\021\000\019\001\000\000\000\000\017\000\
\000\000\017\000\000\000\000\000\017\000\000\000\000\000\134\001\
\000\000\014\000\018\000\018\000\000\000\017\000\018\000\018\000\
\000\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\000\000\018\000\
\018\000\018\000\000\000\000\000\000\000\000\000\018\000\018\000\
\000\000\018\000\000\000\019\000\018\000\020\000\000\000\018\000\
\021\000\028\001\000\000\000\000\018\000\000\000\018\000\000\000\
\000\000\018\000\000\000\000\000\026\000\026\000\014\000\000\000\
\026\000\026\000\018\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\000\000\026\000\026\000\026\000\000\000\000\000\000\000\000\000\
\026\000\026\000\000\000\018\000\000\000\019\000\026\000\020\000\
\000\000\026\000\021\000\098\001\000\000\000\000\026\000\000\000\
\026\000\000\000\000\000\026\000\000\000\000\000\027\000\027\000\
\014\000\000\000\027\000\027\000\026\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\027\000\027\000\000\000\027\000\027\000\027\000\000\000\000\000\
\000\000\000\000\027\000\027\000\000\000\000\000\000\000\000\000\
\027\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\
\027\000\000\000\027\000\000\000\000\000\027\000\000\000\000\000\
\012\000\012\000\000\000\000\000\000\000\000\000\027\000\012\000\
\012\000\012\000\012\000\012\000\012\000\000\000\000\000\012\000\
\012\000\012\000\012\000\012\000\000\000\012\000\012\000\012\000\
\000\000\000\000\000\000\000\000\012\000\012\000\000\000\000\000\
\000\000\000\000\012\000\000\000\000\000\012\000\000\000\000\000\
\000\000\000\000\012\000\000\000\012\000\000\000\000\000\012\000\
\000\000\000\000\015\000\015\000\000\000\000\000\000\000\000\000\
\012\000\015\000\015\000\015\000\015\000\015\000\015\000\000\000\
\000\000\015\000\015\000\015\000\015\000\015\000\000\000\015\000\
\015\000\015\000\000\000\000\000\000\000\000\000\015\000\015\000\
\000\000\000\000\000\000\000\000\015\000\000\000\000\000\015\000\
\000\000\000\000\000\000\000\000\015\000\000\000\015\000\000\000\
\000\000\015\000\000\000\000\000\016\000\016\000\000\000\000\000\
\000\000\000\000\015\000\016\000\016\000\016\000\016\000\016\000\
\016\000\000\000\000\000\016\000\016\000\016\000\016\000\016\000\
\000\000\016\000\016\000\016\000\000\000\000\000\000\000\000\000\
\016\000\016\000\000\000\000\000\000\000\000\000\016\000\000\000\
\000\000\016\000\000\000\038\000\000\000\039\000\016\000\040\000\
\016\000\041\000\042\000\016\000\000\000\000\000\043\000\000\000\
\000\000\000\000\000\000\044\000\016\000\000\000\000\000\000\000\
\000\000\000\000\045\000\046\000\047\000\020\000\020\000\020\000\
\020\000\020\000\020\000\000\000\000\000\020\000\020\000\020\000\
\020\000\020\000\000\000\020\000\020\000\020\000\000\000\000\000\
\000\000\000\000\020\000\020\000\048\000\028\000\000\000\000\000\
\020\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\
\020\000\000\000\020\000\000\000\000\000\020\000\000\000\021\000\
\021\000\021\000\021\000\021\000\021\000\000\000\020\000\021\000\
\021\000\021\000\021\000\021\000\000\000\021\000\021\000\021\000\
\000\000\000\000\000\000\000\000\021\000\021\000\000\000\000\000\
\000\000\000\000\021\000\000\000\000\000\021\000\000\000\000\000\
\000\000\000\000\021\000\000\000\021\000\000\000\000\000\021\000\
\000\000\022\000\022\000\022\000\022\000\022\000\022\000\000\000\
\021\000\022\000\022\000\022\000\022\000\022\000\000\000\022\000\
\022\000\022\000\000\000\000\000\000\000\000\000\022\000\022\000\
\000\000\000\000\000\000\000\000\022\000\000\000\000\000\022\000\
\000\000\000\000\000\000\000\000\022\000\000\000\022\000\000\000\
\000\000\022\000\000\000\023\000\023\000\023\000\023\000\023\000\
\023\000\000\000\022\000\023\000\023\000\023\000\023\000\023\000\
\000\000\023\000\023\000\023\000\000\000\000\000\000\000\000\000\
\023\000\023\000\000\000\000\000\000\000\000\000\023\000\000\000\
\000\000\023\000\000\000\000\000\000\000\000\000\023\000\000\000\
\023\000\000\000\000\000\023\000\000\000\024\000\024\000\024\000\
\024\000\024\000\024\000\000\000\023\000\024\000\024\000\024\000\
\024\000\024\000\000\000\024\000\024\000\024\000\000\000\000\000\
\000\000\000\000\024\000\024\000\000\000\000\000\000\000\000\000\
\024\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\
\024\000\000\000\024\000\000\000\000\000\024\000\000\000\025\000\
\025\000\025\000\025\000\025\000\025\000\000\000\024\000\025\000\
\025\000\025\000\025\000\025\000\000\000\025\000\025\000\025\000\
\000\000\000\000\000\000\000\000\025\000\025\000\000\000\000\000\
\000\000\000\000\025\000\000\000\000\000\025\000\000\000\000\000\
\000\000\000\000\025\000\000\000\025\000\000\000\000\000\025\000\
\000\000\000\000\000\000\000\000\000\000\134\000\135\000\000\000\
\025\000\136\000\137\000\138\000\139\000\140\000\141\000\142\000\
\143\000\144\000\145\000\146\000\147\000\148\000\149\000\150\000\
\151\000\000\000\029\000\029\000\029\000\029\000\029\000\000\000\
\029\000\029\000\029\000\000\000\000\000\000\000\000\000\029\000\
\029\000\000\000\000\000\000\000\000\000\029\000\000\000\156\000\
\029\000\000\000\000\000\000\000\000\000\029\000\000\000\029\000\
\000\000\000\000\029\000\000\000\000\000\000\000\030\000\030\000\
\030\000\030\000\030\000\029\000\030\000\030\000\030\000\000\000\
\000\000\000\000\000\000\030\000\030\000\000\000\000\000\000\000\
\000\000\030\000\000\000\000\000\030\000\000\000\000\000\000\000\
\000\000\030\000\000\000\030\000\000\000\000\000\030\000\000\000\
\000\000\000\000\031\000\031\000\031\000\031\000\031\000\030\000\
\031\000\031\000\031\000\000\000\000\000\000\000\000\000\031\000\
\031\000\000\000\000\000\000\000\000\000\031\000\000\000\000\000\
\031\000\000\000\000\000\000\000\000\000\031\000\000\000\031\000\
\000\000\000\000\031\000\000\000\000\000\000\000\032\000\032\000\
\032\000\032\000\032\000\031\000\032\000\032\000\032\000\000\000\
\000\000\000\000\000\000\032\000\032\000\000\000\000\000\000\000\
\000\000\032\000\000\000\000\000\032\000\000\000\000\000\000\000\
\000\000\032\000\000\000\032\000\000\000\000\000\032\000\000\000\
\000\000\000\000\000\000\000\000\134\000\135\000\000\000\032\000\
\136\000\137\000\138\000\139\000\140\000\141\000\142\000\143\000\
\144\000\145\000\146\000\147\000\148\000\149\000\150\000\151\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\134\000\135\000\
\000\000\155\000\136\000\137\000\138\000\139\000\140\000\141\000\
\142\000\143\000\144\000\145\000\146\000\147\000\148\000\149\000\
\150\000\151\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\038\000\038\000\000\000\079\001\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\086\000\000\000\134\000\
\135\000\000\000\038\000\136\000\137\000\138\000\139\000\140\000\
\141\000\142\000\143\000\144\000\145\000\146\000\147\000\148\000\
\149\000\150\000\151\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\134\000\135\000\
\000\000\183\000\136\000\137\000\138\000\139\000\140\000\141\000\
\142\000\143\000\144\000\145\000\146\000\147\000\148\000\149\000\
\150\000\151\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\134\000\135\000\000\000\
\254\000\136\000\137\000\138\000\139\000\140\000\141\000\142\000\
\143\000\144\000\145\000\146\000\147\000\148\000\149\000\150\000\
\151\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\134\000\135\000\000\000\016\001\
\136\000\137\000\138\000\139\000\140\000\141\000\142\000\143\000\
\144\000\145\000\146\000\147\000\148\000\149\000\150\000\151\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\134\000\135\000\000\000\037\001\136\000\
\137\000\138\000\139\000\140\000\141\000\142\000\143\000\144\000\
\145\000\146\000\147\000\148\000\149\000\150\000\151\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\134\000\135\000\000\000\046\001\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\148\000\149\000\150\000\151\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\134\000\135\000\000\000\089\001\136\000\137\000\138\000\
\139\000\140\000\141\000\142\000\143\000\144\000\145\000\146\000\
\147\000\148\000\149\000\150\000\151\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\134\000\135\000\000\000\113\001\136\000\137\000\138\000\139\000\
\140\000\141\000\142\000\143\000\144\000\145\000\146\000\147\000\
\148\000\149\000\150\000\151\000\000\000\000\000\000\000\000\000\
\000\000\000\000\134\000\135\000\000\000\152\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\148\000\149\000\150\000\151\000\000\000\000\000\
\000\000\000\000\000\000\000\000\134\000\135\000\000\000\011\001\
\136\000\137\000\138\000\139\000\140\000\141\000\142\000\143\000\
\144\000\145\000\146\000\147\000\148\000\149\000\150\000\151\000\
\000\000\000\000\000\000\000\000\000\000\000\000\134\000\135\000\
\000\000\076\001\136\000\137\000\138\000\139\000\140\000\141\000\
\142\000\143\000\144\000\145\000\146\000\147\000\148\000\149\000\
\150\000\151\000\000\000\000\000\000\000\000\000\000\000\000\000\
\134\000\135\000\000\000\103\001\136\000\137\000\138\000\139\000\
\140\000\141\000\142\000\143\000\144\000\145\000\146\000\147\000\
\148\000\149\000\150\000\151\000\000\000\000\000\000\000\000\000\
\000\000\000\000\134\000\135\000\000\000\136\001\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\148\000\149\000\150\000\151\000\000\000\000\000\
\000\000\000\000\000\000\000\000\134\000\135\000\000\000\149\001\
\136\000\137\000\138\000\139\000\140\000\141\000\142\000\143\000\
\144\000\145\000\146\000\147\000\148\000\149\000\150\000\151\000\
\134\000\135\000\000\000\159\000\136\000\137\000\138\000\139\000\
\140\000\141\000\142\000\143\000\144\000\145\000\146\000\147\000\
\148\000\149\000\150\000\151\000\134\000\135\000\000\000\227\000\
\136\000\137\000\138\000\139\000\140\000\141\000\142\000\143\000\
\144\000\145\000\146\000\147\000\148\000\149\000\150\000\151\000\
\134\000\135\000\000\000\009\001\136\000\137\000\138\000\139\000\
\140\000\141\000\142\000\143\000\144\000\145\000\146\000\147\000\
\148\000\149\000\150\000\151\000\134\000\135\000\000\000\027\001\
\136\000\137\000\138\000\139\000\140\000\141\000\142\000\143\000\
\144\000\145\000\146\000\147\000\148\000\149\000\150\000\151\000\
\134\000\135\000\225\000\000\000\136\000\137\000\138\000\139\000\
\140\000\141\000\142\000\143\000\144\000\145\000\146\000\147\000\
\148\000\149\000\150\000\151\000\000\000\193\000\134\000\135\000\
\000\000\000\000\136\000\137\000\138\000\139\000\140\000\141\000\
\142\000\143\000\144\000\145\000\146\000\147\000\148\000\149\000\
\150\000\151\000\134\000\135\000\000\000\000\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000"

let yycheck = "\013\000\
\023\000\012\000\068\000\109\000\002\001\111\000\004\001\005\001\
\022\000\153\000\022\001\040\001\041\001\042\001\028\000\025\001\
\025\001\031\000\025\001\001\000\030\001\030\001\033\000\022\001\
\022\001\025\001\040\000\025\001\076\001\077\001\030\001\025\001\
\010\000\025\001\012\000\058\000\050\000\044\001\025\001\076\001\
\052\001\055\000\065\000\109\000\054\001\025\001\025\001\025\001\
\071\000\058\001\064\000\025\001\030\000\052\001\025\001\033\000\
\025\001\025\001\069\000\073\000\002\001\072\000\004\001\005\001\
\170\000\025\001\076\001\065\001\066\001\067\001\068\001\069\001\
\070\001\071\001\072\001\040\000\076\001\075\001\076\001\077\001\
\022\001\225\000\076\001\076\001\076\001\050\000\025\001\001\001\
\154\000\076\001\055\000\069\000\025\001\025\001\072\000\037\001\
\076\001\076\001\076\001\076\001\114\000\115\000\076\001\025\001\
\118\000\076\001\025\001\076\001\076\001\123\000\025\001\023\001\
\025\001\127\000\022\001\024\001\076\001\025\001\025\001\025\001\
\025\001\025\001\025\001\065\001\066\001\067\001\068\001\069\001\
\070\001\071\001\072\001\026\001\076\001\075\001\076\001\077\001\
\044\001\076\001\152\000\076\001\025\001\155\000\025\001\076\001\
\076\001\076\001\160\000\030\001\214\000\076\001\115\000\035\001\
\022\001\118\000\076\001\026\001\023\001\076\001\123\000\025\001\
\174\000\076\001\002\001\076\001\004\001\005\001\180\000\190\000\
\182\000\076\001\076\001\076\001\076\001\187\000\044\001\058\001\
\060\001\061\001\044\001\025\001\025\001\002\001\022\001\004\001\
\005\001\030\001\031\001\152\000\063\001\025\001\155\000\076\001\
\076\001\077\001\030\001\160\000\022\001\044\001\044\001\025\001\
\022\001\022\001\012\001\025\001\030\001\002\001\003\001\047\001\
\030\001\006\001\007\001\008\001\044\001\058\001\237\000\180\000\
\037\001\182\000\015\001\016\001\059\001\244\000\187\000\062\001\
\044\001\065\001\066\001\067\001\068\001\069\001\070\001\071\001\
\072\001\247\000\248\000\075\001\076\001\077\001\040\001\056\001\
\042\001\255\000\000\001\053\001\065\001\066\001\067\001\068\001\
\069\001\070\001\071\001\072\001\076\001\011\001\075\001\076\001\
\077\001\031\001\076\001\033\001\034\001\019\001\040\001\025\001\
\042\001\017\001\018\001\019\001\020\001\021\001\028\001\023\001\
\024\001\025\001\064\001\076\001\026\001\035\001\030\001\031\001\
\038\001\052\001\046\001\248\000\036\001\049\001\044\001\039\001\
\076\001\047\001\255\000\000\001\044\001\046\001\046\001\028\001\
\049\001\049\001\032\001\075\001\058\001\022\001\011\001\035\001\
\071\001\025\001\058\001\032\001\066\001\045\001\019\001\053\001\
\025\001\064\001\063\001\040\001\041\001\042\001\076\001\028\001\
\045\001\079\001\063\001\048\001\025\001\023\001\035\001\023\001\
\063\001\038\001\025\001\045\001\090\001\076\001\023\001\044\001\
\044\001\025\001\047\001\064\001\098\001\025\001\025\001\008\001\
\002\001\103\001\004\001\005\001\064\001\058\001\052\001\055\001\
\064\001\057\001\064\001\059\001\114\001\066\001\062\001\041\000\
\032\001\043\000\044\000\023\001\022\001\047\000\124\001\076\001\
\031\001\055\001\079\001\057\001\076\001\059\001\048\001\032\001\
\062\001\063\001\136\001\035\001\055\001\090\001\057\001\025\001\
\059\001\067\000\025\001\062\001\063\001\098\001\076\001\149\001\
\025\001\025\001\103\001\077\000\078\000\079\000\080\000\025\001\
\064\001\076\001\064\001\064\001\063\001\114\001\031\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\124\001\
\025\001\075\001\076\001\077\001\049\001\025\001\104\000\046\001\
\025\001\063\001\108\000\136\001\025\001\002\001\025\001\004\001\
\005\001\063\001\006\001\007\001\008\001\064\001\032\001\042\001\
\149\001\025\001\025\001\015\001\016\001\032\001\031\001\064\001\
\025\001\022\001\025\001\064\001\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\148\000\149\000\150\000\151\000\025\001\064\001\
\154\000\032\001\025\001\025\001\158\000\042\001\031\001\161\000\
\025\001\025\001\064\001\064\001\063\001\032\001\025\001\041\001\
\025\001\032\001\172\000\025\001\065\001\066\001\067\001\068\001\
\069\001\070\001\071\001\072\001\025\001\183\000\075\001\076\001\
\077\001\002\001\003\001\064\001\025\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\032\001\023\001\024\001\
\025\001\025\001\032\001\025\001\214\000\030\001\031\001\025\001\
\055\001\219\000\057\001\036\001\059\001\064\001\039\001\062\001\
\063\001\025\001\055\001\044\001\057\001\046\001\059\001\032\001\
\049\001\062\001\063\001\025\001\055\001\076\001\057\001\025\001\
\059\001\058\001\025\001\062\001\063\001\032\001\025\001\076\001\
\025\001\025\001\023\001\026\001\254\000\023\001\063\001\001\001\
\025\001\076\001\046\001\048\001\089\000\127\000\108\001\083\001\
\048\001\255\255\012\001\002\001\003\001\255\255\016\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\023\001\024\001\025\001\037\001\255\255\255\255\255\255\030\001\
\031\001\255\255\255\255\255\255\046\001\036\001\048\001\255\255\
\039\001\255\255\255\255\053\001\255\255\044\001\255\255\046\001\
\255\255\255\255\049\001\255\255\255\255\002\001\003\001\255\255\
\255\255\006\001\007\001\058\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\023\001\024\001\025\001\255\255\255\255\089\001\
\255\255\030\001\031\001\255\255\055\001\255\255\057\001\036\001\
\059\001\255\255\039\001\062\001\063\001\255\255\255\255\044\001\
\255\255\046\001\255\255\255\255\049\001\255\255\255\255\113\001\
\255\255\076\001\002\001\003\001\255\255\058\001\006\001\007\001\
\255\255\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\023\001\
\024\001\025\001\255\255\255\255\255\255\255\255\030\001\031\001\
\255\255\055\001\255\255\057\001\036\001\059\001\255\255\039\001\
\062\001\063\001\255\255\255\255\044\001\255\255\046\001\255\255\
\255\255\049\001\255\255\255\255\002\001\003\001\076\001\255\255\
\006\001\007\001\058\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\023\001\024\001\025\001\255\255\255\255\255\255\255\255\
\030\001\031\001\255\255\055\001\255\255\057\001\036\001\059\001\
\255\255\039\001\062\001\063\001\255\255\255\255\044\001\255\255\
\046\001\255\255\255\255\049\001\255\255\255\255\002\001\003\001\
\076\001\255\255\006\001\007\001\058\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\023\001\024\001\025\001\255\255\255\255\
\255\255\255\255\030\001\031\001\255\255\255\255\255\255\255\255\
\036\001\255\255\255\255\039\001\255\255\255\255\255\255\255\255\
\044\001\255\255\046\001\255\255\255\255\049\001\255\255\255\255\
\002\001\003\001\255\255\255\255\255\255\255\255\058\001\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\255\255\023\001\024\001\025\001\
\255\255\255\255\255\255\255\255\030\001\031\001\255\255\255\255\
\255\255\255\255\036\001\255\255\255\255\039\001\255\255\255\255\
\255\255\255\255\044\001\255\255\046\001\255\255\255\255\049\001\
\255\255\255\255\002\001\003\001\255\255\255\255\255\255\255\255\
\058\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\255\255\023\001\
\024\001\025\001\255\255\255\255\255\255\255\255\030\001\031\001\
\255\255\255\255\255\255\255\255\036\001\255\255\255\255\039\001\
\255\255\255\255\255\255\255\255\044\001\255\255\046\001\255\255\
\255\255\049\001\255\255\255\255\002\001\003\001\255\255\255\255\
\255\255\255\255\058\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\255\255\023\001\024\001\025\001\255\255\255\255\255\255\255\255\
\030\001\031\001\255\255\255\255\255\255\255\255\036\001\255\255\
\255\255\039\001\255\255\027\001\255\255\029\001\044\001\031\001\
\046\001\033\001\034\001\049\001\255\255\255\255\038\001\255\255\
\255\255\255\255\255\255\043\001\058\001\255\255\255\255\255\255\
\255\255\255\255\050\001\051\001\052\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\255\255\023\001\024\001\025\001\255\255\255\255\
\255\255\255\255\030\001\031\001\076\001\077\001\255\255\255\255\
\036\001\255\255\255\255\039\001\255\255\255\255\255\255\255\255\
\044\001\255\255\046\001\255\255\255\255\049\001\255\255\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\058\001\017\001\
\018\001\019\001\020\001\021\001\255\255\023\001\024\001\025\001\
\255\255\255\255\255\255\255\255\030\001\031\001\255\255\255\255\
\255\255\255\255\036\001\255\255\255\255\039\001\255\255\255\255\
\255\255\255\255\044\001\255\255\046\001\255\255\255\255\049\001\
\255\255\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\058\001\017\001\018\001\019\001\020\001\021\001\255\255\023\001\
\024\001\025\001\255\255\255\255\255\255\255\255\030\001\031\001\
\255\255\255\255\255\255\255\255\036\001\255\255\255\255\039\001\
\255\255\255\255\255\255\255\255\044\001\255\255\046\001\255\255\
\255\255\049\001\255\255\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\058\001\017\001\018\001\019\001\020\001\021\001\
\255\255\023\001\024\001\025\001\255\255\255\255\255\255\255\255\
\030\001\031\001\255\255\255\255\255\255\255\255\036\001\255\255\
\255\255\039\001\255\255\255\255\255\255\255\255\044\001\255\255\
\046\001\255\255\255\255\049\001\255\255\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\058\001\017\001\018\001\019\001\
\020\001\021\001\255\255\023\001\024\001\025\001\255\255\255\255\
\255\255\255\255\030\001\031\001\255\255\255\255\255\255\255\255\
\036\001\255\255\255\255\039\001\255\255\255\255\255\255\255\255\
\044\001\255\255\046\001\255\255\255\255\049\001\255\255\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\058\001\017\001\
\018\001\019\001\020\001\021\001\255\255\023\001\024\001\025\001\
\255\255\255\255\255\255\255\255\030\001\031\001\255\255\255\255\
\255\255\255\255\036\001\255\255\255\255\039\001\255\255\255\255\
\255\255\255\255\044\001\255\255\046\001\255\255\255\255\049\001\
\255\255\255\255\255\255\255\255\255\255\002\001\003\001\255\255\
\058\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\017\001\018\001\019\001\020\001\021\001\255\255\
\023\001\024\001\025\001\255\255\255\255\255\255\255\255\030\001\
\031\001\255\255\255\255\255\255\255\255\036\001\255\255\044\001\
\039\001\255\255\255\255\255\255\255\255\044\001\255\255\046\001\
\255\255\255\255\049\001\255\255\255\255\255\255\017\001\018\001\
\019\001\020\001\021\001\058\001\023\001\024\001\025\001\255\255\
\255\255\255\255\255\255\030\001\031\001\255\255\255\255\255\255\
\255\255\036\001\255\255\255\255\039\001\255\255\255\255\255\255\
\255\255\044\001\255\255\046\001\255\255\255\255\049\001\255\255\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\058\001\
\023\001\024\001\025\001\255\255\255\255\255\255\255\255\030\001\
\031\001\255\255\255\255\255\255\255\255\036\001\255\255\255\255\
\039\001\255\255\255\255\255\255\255\255\044\001\255\255\046\001\
\255\255\255\255\049\001\255\255\255\255\255\255\017\001\018\001\
\019\001\020\001\021\001\058\001\023\001\024\001\025\001\255\255\
\255\255\255\255\255\255\030\001\031\001\255\255\255\255\255\255\
\255\255\036\001\255\255\255\255\039\001\255\255\255\255\255\255\
\255\255\044\001\255\255\046\001\255\255\255\255\049\001\255\255\
\255\255\255\255\255\255\255\255\002\001\003\001\255\255\058\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\002\001\003\001\
\255\255\039\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\002\001\003\001\255\255\039\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\031\001\255\255\002\001\
\003\001\255\255\036\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\002\001\003\001\
\255\255\036\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\002\001\003\001\255\255\
\036\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\002\001\003\001\255\255\036\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\002\001\003\001\255\255\036\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\255\255\036\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\002\001\003\001\255\255\036\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\002\001\003\001\255\255\036\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\255\255\031\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\002\001\003\001\255\255\031\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\002\001\003\001\
\255\255\031\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\002\001\003\001\255\255\031\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\255\255\031\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\002\001\003\001\255\255\031\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\002\001\003\001\255\255\025\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\002\001\003\001\255\255\025\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\002\001\003\001\255\255\025\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\002\001\003\001\255\255\025\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\002\001\003\001\024\001\255\255\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\023\001\002\001\003\001\
\255\255\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\002\001\003\001\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001"

let yynames_const = "\
  EOL\000\
  MINUS\000\
  PLUS\000\
  ABS\000\
  NOT\000\
  MULT\000\
  DIV\000\
  POW\000\
  EQUAL\000\
  N_EQUAL\000\
  LESS_T\000\
  GREATER_T\000\
  LESS\000\
  GREATER\000\
  MOD\000\
  REM\000\
  AND\000\
  OR\000\
  XOR\000\
  AND_THEN\000\
  OR_ELSE\000\
  L_PAR\000\
  R_PAR\000\
  COMMA\000\
  SEMICOLON\000\
  COLON\000\
  L_ID\000\
  R_ID\000\
  NULL\000\
  ASS\000\
  LOOP\000\
  END_LOOP\000\
  WHILE\000\
  FOR\000\
  IN\000\
  SEQUENCE\000\
  REVERSE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  ELSIF\000\
  END_IF\000\
  CASE\000\
  IS\000\
  WHEN\000\
  ARROW\000\
  OTHERS\000\
  END_CASE\000\
  PIPE\000\
  GOTO\000\
  EXIT\000\
  RETURN\000\
  RANGE\000\
  CONSTANT\000\
  TYPE\000\
  IS_RANGE\000\
  SUBTYPE\000\
  RENAMES\000\
  PROCEDURE\000\
  OUT\000\
  IN_OUT\000\
  FUNCTION\000\
  BEGIN\000\
  END\000\
  "

let yynames_block = "\
  Int\000\
  Float\000\
  IntExp\000\
  FloatExp\000\
  BaseInt\000\
  BaseFloat\000\
  BaseIntExp\000\
  BaseFloatExp\000\
  Base\000\
  Hex\000\
  String\000\
  Id\000\
  QualId\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'top_def) in
    Obj.repr(
# 38 "parser.mly"
               (_1)
# 1002 "parser.ml"
               : Ast.file))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 40 "parser.mly"
       (Const(Int(_1)))
# 1009 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int*int) in
    Obj.repr(
# 41 "parser.mly"
            (let (a,b) = _1 in Const(Float(a, b)))
# 1016 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int*bool*int) in
    Obj.repr(
# 42 "parser.mly"
             (let (a, b, c) = _1 in Const(IntExp(a, b, c)))
# 1023 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int*int*bool*int) in
    Obj.repr(
# 43 "parser.mly"
               (let (a, b, c, d) = _1 in Const(FloatExp(a, b, c, d)))
# 1030 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int*string) in
    Obj.repr(
# 44 "parser.mly"
              (let (a, b) = _1 in BaseConst(Int(a, b)))
# 1037 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int*string*string) in
    Obj.repr(
# 45 "parser.mly"
                (let (a, b, c) = _1 in BaseConst(Float(a, b, c)))
# 1044 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int*string*bool*int) in
    Obj.repr(
# 46 "parser.mly"
                 (let (a, b, c, d) = _1 in BaseConst(IntExp(a, b, c, d)))
# 1051 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int*string*string*bool*int) in
    Obj.repr(
# 47 "parser.mly"
                   (let (a, b, c, d, e) = _1 in BaseConst(FloatExp(a, b, c, d, e)))
# 1058 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'string) in
    Obj.repr(
# 48 "parser.mly"
             (String(_1))
# 1065 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'qual_id) in
    Obj.repr(
# 49 "parser.mly"
              (match _1 with 
        |[x] -> Id(x)
        |_ -> QualId(_1))
# 1074 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 52 "parser.mly"
              (Negate(_2))
# 1081 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 53 "parser.mly"
            (Abs(_2))
# 1088 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 54 "parser.mly"
            (Not(_2))
# 1095 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 55 "parser.mly"
                (Minus(_1, _3))
# 1103 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 56 "parser.mly"
               (Plus(_1, _3))
# 1111 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 57 "parser.mly"
               (Mult(_1, _3))
# 1119 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 58 "parser.mly"
              (Div(_1, _3))
# 1127 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 59 "parser.mly"
              (Pow(_1, _3))
# 1135 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 60 "parser.mly"
                (Equal(_1, _3))
# 1143 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 61 "parser.mly"
                  (NEqual(_1, _3))
# 1151 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 62 "parser.mly"
                 (LessT(_1, _3))
# 1159 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 63 "parser.mly"
                    (GreaterT(_1, _3))
# 1167 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 64 "parser.mly"
               (Less(_1, _3))
# 1175 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 65 "parser.mly"
                  (Greater(_1, _3))
# 1183 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 66 "parser.mly"
              (Mod(_1, _3))
# 1191 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 67 "parser.mly"
              (Rem(_1, _3))
# 1199 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 68 "parser.mly"
              (And(_1, _3))
# 1207 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 69 "parser.mly"
             (Or(_1, _3))
# 1215 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 70 "parser.mly"
              (Xor(_1, _3))
# 1223 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 71 "parser.mly"
                   (AndThen(_1, _3))
# 1231 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 72 "parser.mly"
                  (OrElse(_1, _3))
# 1239 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'e) in
    Obj.repr(
# 73 "parser.mly"
                    (Parent(_2))
# 1246 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'qual_id) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'e_sep) in
    Obj.repr(
# 74 "parser.mly"
                                (Fun(_1, _3))
# 1254 "parser.ml"
               : 'e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'string) in
    Obj.repr(
# 76 "parser.mly"
                      (_1 ^ "\"" ^ _2)
# 1262 "parser.ml"
               : 'string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 77 "parser.mly"
             (_1)
# 1269 "parser.ml"
               : 'string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'qual_id) in
    Obj.repr(
# 79 "parser.mly"
                        (_1::_2)
# 1277 "parser.ml"
               : 'qual_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 80 "parser.mly"
         ([_1])
# 1284 "parser.ml"
               : 'qual_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e_sep) in
    Obj.repr(
# 82 "parser.mly"
                     (_1::_3)
# 1292 "parser.ml"
               : 'e_sep))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 83 "parser.mly"
        ([_1])
# 1299 "parser.ml"
               : 'e_sep))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'i) in
    Obj.repr(
# 85 "parser.mly"
                  (let (a, b) = _4 in (_2::a, b))
# 1307 "parser.ml"
               : 'i))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'i_) in
    Obj.repr(
# 86 "parser.mly"
         (([],_1))
# 1314 "parser.ml"
               : 'i))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
                   (Null)
# 1320 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'qual_id) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'e) in
    Obj.repr(
# 89 "parser.mly"
                              (Ass(_1, _3))
# 1328 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'qual_id) in
    Obj.repr(
# 90 "parser.mly"
                        (Proc(_1, []))
# 1335 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'qual_id) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'e_sep) in
    Obj.repr(
# 91 "parser.mly"
                                          (Proc(_1, _3))
# 1343 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 92 "parser.mly"
                                    (Loop(None, _2))
# 1350 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 93 "parser.mly"
                                             (Loop(Some(_1), _4))
# 1358 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'i_seq) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 94 "parser.mly"
                                                (if _1 <> _6 then failwith "ID Loop pas pareil zbfuiyvzftezvy" else Loop(Some(_1), _4))
# 1367 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'e) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 95 "parser.mly"
                                            (While(None, _2, _4))
# 1375 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'e) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 96 "parser.mly"
                                                     (While(Some(_1), _4, _6))
# 1384 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'e) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'i_seq) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 97 "parser.mly"
                                                        (if _1 <> _8 then failwith "ID While pas pareil zbfuiyvzftezvy" else While(Some(_1), _4, _6))
# 1394 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'e) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'e) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 98 "parser.mly"
                                                           (For(None, _2, false, Seq(_4, _6), _8))
# 1404 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 11 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 6 : 'e) in
    let _8 = (Parsing.peek_val __caml_parser_env 4 : 'e) in
    let _10 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 99 "parser.mly"
                                                                    (For(Some(_1), _4, false, Seq(_6, _8), _10))
# 1415 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 12 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 7 : 'e) in
    let _8 = (Parsing.peek_val __caml_parser_env 5 : 'e) in
    let _10 = (Parsing.peek_val __caml_parser_env 3 : 'i_seq) in
    let _12 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 100 "parser.mly"
                                                                       (if _1 <> _12 then failwith "ta mère" else For(Some(_1), _4, false, Seq(_6, _8), _10))
# 1427 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'e) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'e) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 101 "parser.mly"
                                                                   (For(None, _2, true, Seq(_5, _7), _9))
# 1437 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 12 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 6 : 'e) in
    let _9 = (Parsing.peek_val __caml_parser_env 4 : 'e) in
    let _11 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 102 "parser.mly"
                                                                            (For(Some(_1), _4, true, Seq(_7, _9), _11))
# 1448 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 13 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 7 : 'e) in
    let _9 = (Parsing.peek_val __caml_parser_env 5 : 'e) in
    let _11 = (Parsing.peek_val __caml_parser_env 3 : 'i_seq) in
    let _13 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 103 "parser.mly"
                                                                               (if _1 <> _13 then failwith "ta mère" else For(Some(_1), _4, true, Seq(_7, _9), _11))
# 1460 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 't) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 104 "parser.mly"
                                                (For(None, _2, false, Type(_4), _6))
# 1469 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 't) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 105 "parser.mly"
                                                         (For(Some(_1), _4, false, Type(_6), _8))
# 1479 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 't) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : 'i_seq) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 106 "parser.mly"
                                                            (if _1 <> _10 then failwith "ta mère" else For(Some(_1), _4, false, Type(_6), _8))
# 1490 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 't) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 107 "parser.mly"
                                                        (For(None, _2, true, Type(_5), _7))
# 1499 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 't) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 108 "parser.mly"
                                                                 (For(Some(_1), _4, true, Type(_7), _9))
# 1509 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 11 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 't) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'i_seq) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 109 "parser.mly"
                                                                    (if _1 <> _11 then failwith "ta mère" else For(Some(_1), _4, true, Type(_7), _9))
# 1520 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'e) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 110 "parser.mly"
                                       (If(_2, _4, [], []))
# 1528 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'e) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'i_seq) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 111 "parser.mly"
                                                  (If(_2, _4, [], _6))
# 1537 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'e) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'i_seq) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'else_if) in
    Obj.repr(
# 112 "parser.mly"
                                               (If(_2, _4, _5, []))
# 1546 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'e) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'i_seq) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'else_if) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 113 "parser.mly"
                                                          (If(_2, _4, _5, _7))
# 1556 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'e) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'when_seq) in
    Obj.repr(
# 114 "parser.mly"
                                            (Case(_2, _4))
# 1564 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 115 "parser.mly"
                        (Goto(_2))
# 1571 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    Obj.repr(
# 116 "parser.mly"
                     (Exit(None))
# 1577 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'e) in
    Obj.repr(
# 117 "parser.mly"
                               (Exit(Some(_2, _4)))
# 1585 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    Obj.repr(
# 118 "parser.mly"
                       (ProcReturn)
# 1591 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'e) in
    Obj.repr(
# 119 "parser.mly"
                         (ProcFun(_2))
# 1598 "parser.ml"
               : 'i_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'i) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'i_seq) in
    Obj.repr(
# 121 "parser.mly"
               (_1::_2)
# 1606 "parser.ml"
               : 'i_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'i) in
    Obj.repr(
# 122 "parser.mly"
        ([_1])
# 1613 "parser.ml"
               : 'i_seq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'e) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'i_seq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'else_if) in
    Obj.repr(
# 124 "parser.mly"
                                    ((_2, _4)::_5)
# 1622 "parser.ml"
               : 'else_if))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'i_seq) in
    Obj.repr(
# 125 "parser.mly"
                         ([(_2, _4)])
# 1630 "parser.ml"
               : 'else_if))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'choix_seq) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'i_seq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'when_seq) in
    Obj.repr(
# 127 "parser.mly"
                                              ((_2, _4)::_5)
# 1639 "parser.ml"
               : 'when_seq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'choix_seq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'i_seq) in
    Obj.repr(
# 128 "parser.mly"
                                 ([(_2, _4)])
# 1647 "parser.ml"
               : 'when_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'choix) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'choix_seq) in
    Obj.repr(
# 130 "parser.mly"
                                (_1::_3)
# 1655 "parser.ml"
               : 'choix_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'choix) in
    Obj.repr(
# 131 "parser.mly"
            ([_1])
# 1662 "parser.ml"
               : 'choix_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 133 "parser.mly"
         (Expression(_1))
# 1669 "parser.ml"
               : 'choix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 134 "parser.mly"
                   (Seq(_1, _3))
# 1677 "parser.ml"
               : 'choix))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "parser.mly"
             (Others)
# 1683 "parser.ml"
               : 'choix))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 137 "parser.mly"
      ((_1, None))
# 1690 "parser.ml"
               : 't))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'e) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 138 "parser.mly"
                            ((_1, Some(_3, _5)))
# 1699 "parser.ml"
               : 't))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_sep) in
    Obj.repr(
# 140 "parser.mly"
                          (Obj(_1, false, None, None))
# 1706 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'id_sep) in
    Obj.repr(
# 141 "parser.mly"
                                      (Obj(_1, true, None, None))
# 1713 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'id_sep) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 't) in
    Obj.repr(
# 142 "parser.mly"
                               (Obj(_1, false, Some(_3), None))
# 1721 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'id_sep) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 't) in
    Obj.repr(
# 143 "parser.mly"
                                        (Obj(_1, true, Some(_4), None))
# 1729 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'id_sep) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 't) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'def) in
    Obj.repr(
# 144 "parser.mly"
                                   (Obj(_1, false, Some(_3), Some(_4)))
# 1738 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'id_sep) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 't) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'def) in
    Obj.repr(
# 145 "parser.mly"
                                            (Obj(_1, true, Some(_4), Some(_5)))
# 1747 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'id_sep) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'def) in
    Obj.repr(
# 146 "parser.mly"
                                 (Obj(_1, false, None, Some(_3)))
# 1755 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'id_sep) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'def) in
    Obj.repr(
# 147 "parser.mly"
                                          (Obj(_1, true, None, Some(_4)))
# 1763 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'e) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'e) in
    Obj.repr(
# 148 "parser.mly"
                                              (Type(_2, Some(_4, _6)))
# 1772 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 't) in
    Obj.repr(
# 149 "parser.mly"
                                (SubType(_2, _4))
# 1780 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'id_sep) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 't) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'qual_id) in
    Obj.repr(
# 150 "parser.mly"
                                               (Renames(_1, _3, _5))
# 1789 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 151 "parser.mly"
                             (Proc(_2, []))
# 1796 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'param_seq) in
    Obj.repr(
# 152 "parser.mly"
                                                   (Proc(_2, _4))
# 1804 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'qual_id) in
    Obj.repr(
# 153 "parser.mly"
                                           (Fun(_2, [], _4))
# 1812 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'param_seq) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'qual_id) in
    Obj.repr(
# 154 "parser.mly"
                                                                 (Fun(_2, _4, _7))
# 1821 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 155 "parser.mly"
                                                (DefProc(_2, [], [], _5, None))
# 1829 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'param_seq) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 156 "parser.mly"
                                                                      (DefProc(_2, _4, [], _8, None))
# 1838 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'qual_id) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 157 "parser.mly"
                                                              (DefFun(_2, [], _4, [], _7, None))
# 1847 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 8 : 'param_seq) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'qual_id) in
    let _10 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 158 "parser.mly"
                                                                                    (DefFun(_2, _4, _7, [], _10, None))
# 1857 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'd_seq) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 159 "parser.mly"
                                                      (DefProc(_2, [], _4, _6, None))
# 1866 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'param_seq) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'd_seq) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 160 "parser.mly"
                                                                            (DefProc(_2, _4, _7, _9, None))
# 1876 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'qual_id) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'd_seq) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 161 "parser.mly"
                                                                    (DefFun(_2, [], _4, _6, _8, None))
# 1886 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 11 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 9 : 'param_seq) in
    let _7 = (Parsing.peek_val __caml_parser_env 6 : 'qual_id) in
    let _9 = (Parsing.peek_val __caml_parser_env 4 : 'd_seq) in
    let _11 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 162 "parser.mly"
                                                                                          (DefFun(_2, _4, _7, _9, _11, None))
# 1897 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'i_seq) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 163 "parser.mly"
                                                   (if _2 <> _7 then failwith "ta mère" else DefProc(_2, [], [], _5, Some(_7)))
# 1906 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'param_seq) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : 'i_seq) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 164 "parser.mly"
                                                                         (if _2 <> _10 then failwith "ta mère" else DefProc(_2, _4, [], _8, Some(_10)))
# 1916 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'qual_id) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'i_seq) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 165 "parser.mly"
                                                                 (if _2 <> _9 then failwith "ta mère" else DefFun(_2, [], _4, [], _7, Some(_9)))
# 1926 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 11 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 9 : 'param_seq) in
    let _7 = (Parsing.peek_val __caml_parser_env 6 : 'qual_id) in
    let _10 = (Parsing.peek_val __caml_parser_env 3 : 'i_seq) in
    let _12 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 166 "parser.mly"
                                                                                       (if _2 <> _12 then failwith "ta mère" else DefFun(_2, _4, _7, [], _10, Some(_12)))
# 1937 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'd_seq) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'i_seq) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 167 "parser.mly"
                                                         (if _2 <> _8 then failwith "ta mère" else DefProc(_2, [], _4, _6, Some(_8)))
# 1947 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 8 : 'param_seq) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'd_seq) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'i_seq) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 168 "parser.mly"
                                                                               (if _2 <> _11 then failwith "ta mère" else DefProc(_2, _4, _7, _9, Some(_11)))
# 1958 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'qual_id) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'd_seq) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : 'i_seq) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 169 "parser.mly"
                                                                       (if _2 <> _10 then failwith "ta mère" else DefFun(_2, [], _4, _6, _8, Some(_10)))
# 1969 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 12 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 10 : 'param_seq) in
    let _7 = (Parsing.peek_val __caml_parser_env 7 : 'qual_id) in
    let _9 = (Parsing.peek_val __caml_parser_env 5 : 'd_seq) in
    let _11 = (Parsing.peek_val __caml_parser_env 3 : 'i_seq) in
    let _13 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 170 "parser.mly"
                                                                                             (if _2 <> _13 then failwith "ta mère" else DefFun(_2, _4, _7, _9, _11, Some(_13)))
# 1981 "parser.ml"
               : 'd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 172 "parser.mly"
                                                   (TopDefProc(_2, [], [], _5, None))
# 1989 "parser.ml"
               : 'top_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'param_seq) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 173 "parser.mly"
                                                                      (TopDefProc(_2, _4, [], _8, None))
# 1998 "parser.ml"
               : 'top_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'qual_id) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 174 "parser.mly"
                                                              (TopDefFun(_2, [], _4, [], _7, None))
# 2007 "parser.ml"
               : 'top_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 8 : 'param_seq) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'qual_id) in
    let _10 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 175 "parser.mly"
                                                                                    (TopDefFun(_2, _4, _7, [], _10, None))
# 2017 "parser.ml"
               : 'top_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'd_seq) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 176 "parser.mly"
                                                      (TopDefProc(_2, [], _4, _6, None))
# 2026 "parser.ml"
               : 'top_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'param_seq) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'd_seq) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 177 "parser.mly"
                                                                            (TopDefProc(_2, _4, _7, _9, None))
# 2036 "parser.ml"
               : 'top_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'qual_id) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'd_seq) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 178 "parser.mly"
                                                                    (TopDefFun(_2, [], _4, _6, _8, None))
# 2046 "parser.ml"
               : 'top_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 11 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 9 : 'param_seq) in
    let _7 = (Parsing.peek_val __caml_parser_env 6 : 'qual_id) in
    let _9 = (Parsing.peek_val __caml_parser_env 4 : 'd_seq) in
    let _11 = (Parsing.peek_val __caml_parser_env 2 : 'i_seq) in
    Obj.repr(
# 179 "parser.mly"
                                                                                          (TopDefFun(_2, _4, _7, _9, _11, None))
# 2057 "parser.ml"
               : 'top_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'i_seq) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 180 "parser.mly"
                                                   (if _2 <> _7 then failwith "ta mère" else TopDefProc(_2, [], [], _5, Some(_7)))
# 2066 "parser.ml"
               : 'top_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'param_seq) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : 'i_seq) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 181 "parser.mly"
                                                                         (if _2 <> _10 then failwith "ta mère" else TopDefProc(_2, _4, [], _8, Some(_10)))
# 2076 "parser.ml"
               : 'top_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'qual_id) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'i_seq) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 182 "parser.mly"
                                                                 (if _2 <> _9 then failwith "ta mère" else TopDefFun(_2, [], _4, [], _7, Some(_9)))
# 2086 "parser.ml"
               : 'top_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 11 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 9 : 'param_seq) in
    let _7 = (Parsing.peek_val __caml_parser_env 6 : 'qual_id) in
    let _10 = (Parsing.peek_val __caml_parser_env 3 : 'i_seq) in
    let _12 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 183 "parser.mly"
                                                                                       (if _2 <> _12 then failwith "ta mère" else TopDefFun(_2, _4, _7, [], _10, Some(_12)))
# 2097 "parser.ml"
               : 'top_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'd_seq) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'i_seq) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 184 "parser.mly"
                                                         (if _2 <> _8 then failwith "ta mère" else TopDefProc(_2, [], _4, _6, Some(_8)))
# 2107 "parser.ml"
               : 'top_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 8 : 'param_seq) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'd_seq) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'i_seq) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 185 "parser.mly"
                                                                               (if _2 <> _11 then failwith "ta mère" else TopDefProc(_2, _4, _7, _9, Some(_11)))
# 2118 "parser.ml"
               : 'top_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'qual_id) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'd_seq) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : 'i_seq) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 186 "parser.mly"
                                                                       (if _2 <> _10 then failwith "ta mère" else TopDefFun(_2, [], _4, _6, _8, Some(_10)))
# 2129 "parser.ml"
               : 'top_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 12 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 10 : 'param_seq) in
    let _7 = (Parsing.peek_val __caml_parser_env 7 : 'qual_id) in
    let _9 = (Parsing.peek_val __caml_parser_env 5 : 'd_seq) in
    let _11 = (Parsing.peek_val __caml_parser_env 3 : 'i_seq) in
    let _13 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 187 "parser.mly"
                                                                                             (if _2 <> _13 then failwith "ta mère" else TopDefFun(_2, _4, _7, _9, _11, Some(_13)))
# 2141 "parser.ml"
               : 'top_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_sep) in
    Obj.repr(
# 189 "parser.mly"
                        (_1::_3)
# 2149 "parser.ml"
               : 'id_sep))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 190 "parser.mly"
        ([_1])
# 2156 "parser.ml"
               : 'id_sep))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'e) in
    Obj.repr(
# 192 "parser.mly"
           (_2)
# 2163 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_sep) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'qual_id) in
    Obj.repr(
# 194 "parser.mly"
                            ((_1, None, _3))
# 2171 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'id_sep) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'mode) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'qual_id) in
    Obj.repr(
# 195 "parser.mly"
                                ((_1, Some(_3), _4))
# 2180 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_seq) in
    Obj.repr(
# 197 "parser.mly"
                                     (_1::_3)
# 2188 "parser.ml"
               : 'param_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 198 "parser.mly"
            ([_1])
# 2195 "parser.ml"
               : 'param_seq))
; (fun __caml_parser_env ->
    Obj.repr(
# 200 "parser.mly"
         (In)
# 2201 "parser.ml"
               : 'mode))
; (fun __caml_parser_env ->
    Obj.repr(
# 201 "parser.mly"
          (Out)
# 2207 "parser.ml"
               : 'mode))
; (fun __caml_parser_env ->
    Obj.repr(
# 202 "parser.mly"
             (InOut)
# 2213 "parser.ml"
               : 'mode))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'd) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'd_seq) in
    Obj.repr(
# 204 "parser.mly"
               (_1::_2)
# 2221 "parser.ml"
               : 'd_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'd) in
    Obj.repr(
# 205 "parser.mly"
        ([_1])
# 2228 "parser.ml"
               : 'd_seq))
(* Entry s *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let s (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.file)
